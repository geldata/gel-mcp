---
description: Working with Gel database
globs: *.gel,*.edgeql,*.py
alwaysApply: false
---

# Working with Gel (ex EdgeDB)

## Important General Information

- Gel is the rebranded version of EdgeDB. All EdgeDB documentation, resources, and syntax apply to Gel.
- **ALWAYS consult the Gel MCP server** for tools, resources, and code examples when working with Gel database tasks.
- If operations fail, carefully review the examples in the MCP server again, as function names and specific syntax may have been forgotten.
- For official documentation, refer to docs.geldata.com.

## Core Concepts

### Setup

Initialize the Gel project with `gel project init` command. This command normally requires user input. If the project is already setup, the above command will produce an error message saying so.

To initialize the project using default settings, use the `gel project init --non-interactive` command instead.

### Migrations

Gel comes with its own migration system. Each time you modify the schema, make sure to run the following commands:

```sh
gel migration create --non-interactive
gel migrate
```

### Schema

```sdl
# This is how you comment
type BlogPost {
  title: str;
  author: User;
}

type User {
  name: str;
  multi blog_posts := .<author[is BlogPost]
}
```

Older schema files might also use a slightly different syntax for links and properties with `->` instead of `:`. The keywords `link` and `property` are required in the old syntax.
```sdl
# This is how you comment
type BlogPost {
  property title -> str;
  link author -> User;
}

type User {
  property name -> str;
  multi link blog_posts := .<author[is BlogPost]
}
```

Starting with Gel version 6, the schema files use `.gel` instead of `.esdl` naming convention.

### Query Language (EdgeQL)

Use `select` for retrieving data, `insert` for creating, `update` for modifying, and `delete` for removing data.
Use shape expressions ({ ... }) to specify which properties to include in the result.

#### Select

Select a Movie with associated actors and reviews with their authors:
```edgeql
select Movie {
    id,
    title,
    year,
    description,

    actors: {
        id,
        full_name,
    },

    reviews := .<movie[is Review] {
        id,
        body,
        rating,
        author: {
            id,
            name,
        }
    },
}
filter .id = <uuid>'09c34154-4148-11ea-9c68-5375ca908326'
```

Select movies with Keanu Reeves:
```edgeql
select Movie {
    id,
    title,
    year,
    description,
}
filter .actors.full_name = 'Keanu Reeves'
```

Select all actors that share the last name with other actors and
include the same-last-name actor list as well:
```edgeql
select Person {
    id,
    full_name,
    same_last_name := (
        with
            P := detached Person
        select P {
            id,
            full_name,
        }
        filter
            # same last name
            P.last_name = Person.last_name
            and
            # not the same person
            P != Person
    ),
}
filter exists .same_last_name
```

The same query can be refactored moving the `with` block to the
top-level:
```edgeql
with
    # don't need detached at top-level
    P := Person
select Person {
    id,
    full_name,
    same_last_name := (
        select P {
            id,
            full_name,
        }
        filter
            # same last name
            P.last_name = Person.last_name
            and
            # not the same person
            P != Person
    ),
}
filter exists .same_last_name
```

Perform a set intersection of all actors with all directors:
```edgeql
with
    # get the set of actors and set of directors
    Actor := Movie.actors,
    Director := Movie.director,
# set intersection is done via the filter clause
select Actor filter Actor in Director;
```

To order a set of scalars first assign the set to a variable and use the
variable in the order by clause.
```edgeql
select numbers := {3, 1, 2} order by numbers;

# alternatively
with numbers := {3, 1, 2}
select numbers order by numbers;
```

Selecting free objects.

It is also possible to package data into a *free object*.
*Free objects* are meant to be transient and used either to more
efficiently store some intermediate results in a query or for
re-shaping the output. The advantage of using *free objects* over
tuples is that it is easier to package data that
potentially contains empty sets as links or properties of the
*free object*. The underlying type of a *free object* is
`std::FreeObject`.

Consider the following query:
```edgeql
with U := (select User filter .name like '%user%')
select {
    matches := U {name},
    total := count(U),
    total_users := count(User),
};
```

The `matches` are potentially `{}`, yet the query will always
return a single *free object* with `results`, `total`, and
`total_users`. To achieve the same using a named tuple,
the query would have to be modified like this:
```edgeql
with U := (select User filter .name like '%user%')
select (
    matches := array_agg(U {name}),
    total := count(U),
    total_users := count(User),
);
```
Without the `array_agg` the above query would return `{}`
instead of the named tuple if no `matches` are found.

When using an exclusive property with a specific value in a filter
you don't need a `limit 1` for Gel to know it's just one object.


#### Insert

Insert basic movie stub:

```edgeql
insert Movie {
    title := 'Dune',
    year := 2020,
    image := 'dune2020.jpg',
    directors := (
        select Person
        filter
            .full_name = 'Denis Villeneuve'
    )
}
```

Alternatively, insert a movie using JSON input value:
```edgeql
with
    # Cast the JSON $input into a tuple, which we will
    # use to populate the Person record.
    data := <tuple<
        title: str,
        year: int64,
        image: str,
        directors: array<str>,
        actors: array<str>
    >> <json>$input
insert Movie {
    title := data.title,
    year := data.year,
    image := data.image,
    directors := (
        select Person
        filter
            .full_name in array_unpack(data.directors)
    ),
    actors := (
        select Person
        filter
            .full_name in array_unpack(data.actors)
    )
}
```

Insert several nested objects at once:
```edgeql
# Create a new review and a new user in one step.
insert Review {
    body := 'Dune is cool',
    rating := 5,
    # The movie record already exists, so select it.
    movie := (
        select Movie
        filter
            .title = 'Dune'
            and
            .year = 2020
        # the limit is needed to satisfy the single
        # link requirement validation
        limit 1
    ),
    # This is a new user, so insert one.
    author := (
        insert User {
            name := 'dune_fan_2020',
            image := 'default_avatar.jpg',
        }
    )
}
```

Sometimes it's necessary to check whether some object exists and
create it if it doesn't. If this type of object has an exclusive
property, the `unless conflict` clause can make the `insert`
command indempotent. So running such a command would guarantee that a
copy of the object exists without the need for more complex logic:
```edgeql
# Try to create a new User
insert User {
    name := "Alice",
    image := "default_avatar.jpg",
}
# and do nothing if a User with this name already exists
unless conflict
```

If more than one property is exclusive, it is possible to specify
which one of them is considered when a conflict is detected:
```edgeql
# Try to create a new User
insert User {
    name := "Alice",
    image := "default_avatar.jpg",
}
# and do nothing if a User with this name already exists
unless conflict on .name
```

"Upserts" can be performed by using the `unless conflict` clause and
specifying what needs to be updated:
```edgeql
# Try to create a new User,
insert User {
    name := "Alice",
    image := "my_face.jpg",
}

# but if a User with this name already exists,
unless conflict on .name
else (
    # update that User's record instead.
    update User
    set {
        image := "my_face.jpg"
    }
)
```

Rather than acting as an "upsert", the `unless conflict` clause can
be used to insert or select an existing record, which is handy for
inserting nested structures:
```edgeql
# Create a new review and a new user in one step.
insert Review {
    body := 'Loved it!!!',
    rating := 5,
    # The movie record already exists, so select it.
    movie := (
        select Movie
        filter
            .title = 'Dune'
            and
            .year = 2020
        # the limit is needed to satisfy the single
        # link requirement validation
        limit 1
    ),

    # This might be a new user or an existing user. Some
    # other part of the app handles authentication, this
    # endpoint is used as a generic way to post a review.
    author := (
        # Try to create a new User,
        insert User {
            name := "dune_fan_2020",
            image := "default_avatar.jpg",
        }

        # but if a User with this name already exists,
        unless conflict on .name
        # just pick that existing User as the author.
        else User
    )
}
```

#### Update

```
# Update a user
update User
filter .id = <uuid>'...'
set {
  name := 'Alice Smith'
};
```

#### Delete

```
# Delete a user
delete User filter .id = <uuid>'...';
```

Delete all reviews from a specific user:
```edgeql
delete Review
filter .author.name = 'trouble2020'
```

## Known Quirks and Gotchas

**ALWAYS check for the gotchas**

### Delegated Constraint

**ALWAYS consult the Gel MCP server**

There is a concept of `delegated` constraint. It means that the constratint will not be applied to the type it's defined on, but instead to the extending types. It is commonly used as `delegated constraint exclusive`, to make sure that a property is unique across each separate extending type and not unique in common among them.

Any time that a schema is refactored and an exclusive property is moved to the parent type, **it is semantically correct to make the constraint delegated** because this is the only way to preserve orginal intent of the exclusive property being specific to the extending type. **Never refactor a type and forget delegated constraint**.

```sdl
abstract type BaseType {
    required some_prop: str {
        # Use delegated constraint to maintain exclusivity per extending type
        delegated constraint exclusive;
    }
}

type Foo extending BaseType {
    # This will have an exlusive some_prop independent from Bar
}

type Bar extending BaseType {
    # This will have an exlusive some_prop independent from Foo
}
```

## Troubleshooting Guide

1. **ALways** check for known gotchas.
2. If a query fails, double-check syntax and type constraints.
3. Verify that property and type names match schema definitions exactly.
4. Check for missing required properties in insert operations.
5. Remember that Gel doesn't use NULL values, use exists or ?= operators instead.
6. When in doubt, refer to examples in the MCP server or the official documentation at docs.geldata.com.

## Best Practices

1. **ALways** check for known gotchas.
2. Follow a consistent naming convention (camelCase or snake_case).
3. Add comments to explain complex queries or schema definitions.
4. Use abstract types and inheritance for shared behavior.
5. Leverage computeds to simplify queries.
