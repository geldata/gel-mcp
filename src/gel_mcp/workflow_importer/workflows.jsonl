{"workflow_id":"54c3e6b2-4c75-4e64-bb85-2ab9d8d80c63","workflow_name":"Basics","description":"Set up a basic schema in a pre-initialized Gel project, and write an insert and a select query.","test_cases":[{"test_id":"test-1","prompt":"This is a brand new project bootstrapped with uv and Gel. I would like to use Gel to keep track of Komi-san's friends. Create a minimal schema that has an entity for a friend, that can be used to keep track of things like name, defining trait and relationship to Komi-san as strings.","initial_state":{"description":"uv init && uv add gel && gel project init --non-interactive","dbschema":"module default {\n\n}","data":"","queries":""},"expected_steps":["Update the schema","Run a migration"],"expected_outcome":{"description":"","dbschema":"module default {\n    type Friend {\n        required name: str;\n        required defining_trait: str;\n        required relationship_to_komi: str;\n        \n        # When the friendship was established (optional)\n        friendship_date: cal::local_date;\n        \n        # Additional notes about the friend (optional)\n        notes: str;\n    }\n}","data":"","queries":""}},{"test_id":"test-2","prompt":"Populate the database with characters from the anime.","initial_state":{"description":"Outcome of test-1.","dbschema":"","data":"","queries":""},"expected_steps":[],"expected_outcome":{"description":"","dbschema":"","data":"friends = [\n    {\n        \"name\": \"Najimi Osana\",\n        \"defining_trait\": \"energetic and mischievous\",\n        \"relationship_to_komi\": \"childhood friend\",\n        \"friendship_date\": datetime.date(2022, 4, 15),\n        \"notes\": \"Gender is a mystery\"\n    },\n    {\n        \"name\": \"Hitohito Tadano\",\n        \"defining_trait\": \"average and understanding\",\n        \"relationship_to_komi\": \"first friend at new school\",\n        \"friendship_date\": datetime.date(2022, 4, 10),\n        \"notes\": \"Can understand Komi-san's feelings without words\"\n    },\n    {\n        \"name\": \"Himiko Agari\",\n        \"defining_trait\": \"anxious and timid\",\n        \"relationship_to_komi\": \"second friend at school\",\n        \"friendship_date\": datetime.date(2022, 4, 20),\n        \"notes\": \"Often compared to a dog\"\n    },\n    {\n        \"name\": \"Makoto Katai\",\n        \"defining_trait\": \"intimidating but shy\",\n        \"relationship_to_komi\": \"classmate and friend\",\n        \"friendship_date\": datetime.date(2022, 5, 15),\n        \"notes\": \"Has social anxiety like Komi-san\"\n    },\n    {\n        \"name\": \"Ren Yamai\",\n        \"defining_trait\": \"obsessive and possessive\",\n        \"relationship_to_komi\": \"classmate with a crush on Komi\",\n        \"friendship_date\": datetime.date(2022, 4, 25),\n        \"notes\": \"Initially jealous of Tadano\"\n    }\n]\n\nfor friend_data in friends:\n    await client.query(\"\"\"\n        INSERT Friend {\n            name := <str>$name,\n            defining_trait := <str>$defining_trait,\n            relationship_to_komi := <str>$relationship_to_komi,\n            friendship_date := <cal::local_date>$friendship_date,\n            notes := <str>$notes\n        }\n    \"\"\", **friend_data)","queries":""}},{"test_id":"test-3","prompt":"Write a select query to fetch friends by their name.","initial_state":{"description":"Outcome of test-2","dbschema":"","data":"","queries":""},"expected_steps":[],"expected_outcome":{"description":"","dbschema":"","data":"","queries":"with \n  name := <optional str>$name\nselect Friend {\n  name,\n  relationship_to_komi,\n  description\n} filter \n  # If name parameter is provided, filter by it\n  .name ilike '%' ++ name ++ '%' if exists name\n  # Otherwise, return all friends\n  else true\norder by .name; "}}]}
{"workflow_id":"0f3b357b-ba25-47d9-95ab-a6874c463e56","workflow_name":"AI embeddings","description":"Enable `ext::ai` to configure automatic embeddings, set up the API key, create the index and perform semantic search using the Python binding.","test_cases":[{"test_id":"test-1","prompt":"This is an application for keeping track of Komi-san's friends. I would like you to add vector search to it. Start by enabling and configuring the relevant extension.","initial_state":{"description":"","dbschema":"module default {\n    type Friend {\n        required name: str {\n            constraint exclusive;\n        };\n\n        summary: str;               # A brief description of personality and role\n        relationship_to_komi: str;  # Relationship with Komi\n        defining_trait: str;        # Primary character trait or quirk\n    }\n}","data":"insert Friend {\n    name := 'Tadano Hitohito',\n    summary := 'An extremely average high school boy with a remarkable ability to read the atmosphere and understand others\\' feelings, especially Komi\\'s.',\n    relationship_to_komi := 'First friend and love interest',\n    defining_trait := 'Perceptiveness',\n};\n\ninsert Friend {\n    name := 'Osana Najimi',\n    summary := 'An extremely outgoing person who claims to have been everyone\\'s childhood friend. Gender: Najimi.',\n    relationship_to_komi := 'Second friend and social catalyst',\n    defining_trait := 'Universal childhood friend',\n};\n\ninsert Friend {\n    name := 'Yamai Ren',\n    summary := 'An intense and sometimes obsessive classmate who is completely infatuated with Komi.',\n    relationship_to_komi := 'Self-proclaimed guardian and admirer',\n    defining_trait := 'Obsessive devotion',\n};\n\ninsert Friend {\n    name := 'Katai Makoto',\n    summary := 'A intimidating-looking but shy student who shares many communication problems with Komi.',\n    relationship_to_komi := 'Fellow communication-challenged friend',\n    defining_trait := 'Scary appearance but gentle nature',\n};\n\ninsert Friend {\n    name := 'Nakanaka Omoharu',\n    summary := 'A self-proclaimed wielder of dark powers who acts like an anime character and is actually just a regular gaming enthusiast.',\n    relationship_to_komi := 'Gaming buddy and chuunibyou friend',\n    defining_trait := 'Chuunibyou tendencies',\n};","queries":""},"expected_steps":["Enable the extension in the schema and do a migration:\n```gel\n# outside of module definition\nusing extension ai;\n```","Configure the API key:\n```edgeql\nconfigure current database\ninsert ext::ai::OpenAIProviderConfig {\n    secret := 'sk-....',\n};","Add `ext::ai::index` to the type","Use the `ext::ai::search` function in queries"],"expected_outcome":{"description":"The extension has been successfully enabled, the user has been prompted to configure the API key.","dbschema":"","data":"","queries":""}},{"test_id":"test-2","prompt":"Add the index to the database.","initial_state":{"description":"Outcome of test-1.","dbschema":"","data":"","queries":""},"expected_steps":[],"expected_outcome":{"description":"Added the index, ran a migration.","dbschema":"using extension ai;\n\nmodule default {\n    # Friend entity to keep track of Komi-san's friends\n    type Friend {\n        required name: str;\n        required defining_trait: str;\n        required relationship_to_komi: str;\n        \n        # When the friendship was established (optional)\n        friendship_date: cal::local_date;\n        \n        # Additional notes about the friend (optional)\n        notes: str;\n        \n        # Create an embedding index for vector search\n        # This will automatically generate embeddings for a concatenated string of properties\n        deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n            on (\n                .name ++ ' ' ++ \n                .defining_trait ++ ' ' ++ \n                .relationship_to_komi ++ \n                (if exists .notes then ' ' ++ .notes else '')\n            );\n    }\n}","data":"","queries":""}},{"test_id":"test-3","prompt":"Write a vector search query example in Python.","initial_state":{"description":"Outcome of test-2.","dbschema":"","data":"","queries":""},"expected_steps":[],"expected_outcome":{"description":"","dbschema":"","data":"","queries":"embedding = await ai_client.generate_embeddings(\n    search_text,\n    model=\"text-embedding-3-small\"\n)\n\n# Use the generated embedding to search for similar friends\nsimilar_friends = await client.query(\"\"\"\n    WITH \n        search_results := (\n            SELECT ext::ai::search(\n                Friend,\n                <array<float32>>$embedding\n            )\n            LIMIT <int16>$limit\n        )\n    SELECT search_results.object {\n        name,\n        defining_trait,\n        score := 1.0 - search_results.distance  # Convert distance to similarity score\n    }\n    ORDER BY search_results.distance ASC  # Lower distance means more similar\n\"\"\", embedding=embedding, limit=limit)"}}]}
